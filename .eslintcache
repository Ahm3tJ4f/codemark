[{"C:\\Users\\Ahmett\\Desktop\\codemark\\src\\index.tsx":"1","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\components\\code-editor\\code-editor.tsx":"2","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\components\\preview\\preview.tsx":"3","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\bundler\\plugins\\unpkg-path-plugin.ts":"4","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\bundler\\plugins\\fetch-plugin.ts":"5","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\bundler\\index.ts":"6","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\components\\code-cell\\code-cell.tsx":"7","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\components\\resizable\\resizable.tsx":"8"},{"size":322,"mtime":1675666439312,"results":"9","hashOfConfig":"10"},{"size":1713,"mtime":1675604171643,"results":"11","hashOfConfig":"10"},{"size":1111,"mtime":1675604767188,"results":"12","hashOfConfig":"10"},{"size":930,"mtime":1668362290819,"results":"13","hashOfConfig":"10"},{"size":2048,"mtime":1675247496982,"results":"14","hashOfConfig":"10"},{"size":754,"mtime":1675596594281,"results":"15","hashOfConfig":"10"},{"size":994,"mtime":1675605120364,"results":"16","hashOfConfig":"10"},{"size":1835,"mtime":1675690628134,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"za49jg",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Ahmett\\Desktop\\codemark\\src\\index.tsx",[],[],"C:\\Users\\Ahmett\\Desktop\\codemark\\src\\components\\code-editor\\code-editor.tsx",["41"],"import \"./code-editor.css\";\r\nimport MonacoEditor, { EditorDidMount } from \"@monaco-editor/react\";\r\nimport prettier from \"prettier\";\r\nimport parser from \"prettier/parser-babel\";\r\nimport { useRef } from \"react\";\r\ninterface CodeEditorProps {\r\n  initialValue: string;\r\n  onChange(value: string): void;\r\n}\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst CodeEditor: React.FC<CodeEditorProps> = ({ initialValue, onChange }) => {\r\n  const editorRef = useRef<any>();\r\n  const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\r\n    editorRef.current = monacoEditor;\r\n    monacoEditor.onDidChangeModelContent(() => {\r\n      onChange(getValue());\r\n    });\r\n  };\r\n  const onFormatClick = () => {\r\n    const unformattedCode = editorRef.current.getModel().getValue();\r\n    const formattedCode = prettier.format(unformattedCode, {\r\n      parser: \"babel\",\r\n      plugins: [parser],\r\n      semi: true,\r\n      singleQuote: false,\r\n    });\r\n    editorRef.current.setValue(formattedCode);\r\n  };\r\n  return (\r\n    <div className=\"editor-wrapper\">\r\n      <button\r\n        className=\"button button-format is-primary\"\r\n        onClick={onFormatClick}\r\n      >\r\n        Format\r\n      </button>\r\n      <MonacoEditor\r\n        editorDidMount={onEditorDidMount}\r\n        value={initialValue}\r\n        theme=\"dark\"\r\n        options={{\r\n          wordWrap: \"on\",\r\n          minimap: { enabled: false },\r\n          showUnused: false,\r\n          folding: false,\r\n          lineNumbersMinChars: 3,\r\n          fontSize: 16,\r\n          scrollBeyondLastLine: false,\r\n          automaticLayout: true,\r\n        }}\r\n        language=\"javascript\"\r\n        height=\"100%\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;\r\n","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\components\\preview\\preview.tsx",["42"],"import { useEffect, useRef } from \"react\";\r\nimport \"./preview.css\";\r\ninterface PreviewProps {\r\n  code: string;\r\n}\r\n\r\nconst html = `\r\n  <html>\r\n    <head>\r\n    </head>\r\n    <body>\r\n      <div id=\"root\"></div>\r\n      <script>\r\n        window.addEventListener(\"message\", (event)=> {\r\n         try{\r\n          eval(event.data)\r\n         } catch (err) {\r\n          console.log(err)\r\n          const root = document.querySelector(\"#root\");\r\n          root.innerHTML = '<div style=\"color: #b80000;\"><h4>Runtime Error</h4>' + err + '</div>';\r\n         }\r\n        })\r\n      </script>\r\n    </body>\r\n  </html>\r\n    `;\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst Preview: React.FC<PreviewProps> = ({ code }) => {\r\n  const iframe = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    iframe.current.srcdoc = html;\r\n    iframe.current.contentWindow.postMessage(code, \"*\");\r\n  }, [code]);\r\n\r\n  return (\r\n    <div className=\"preview-wrapper\">\r\n      <iframe\r\n        title=\"codePreview\"\r\n        srcDoc={html}\r\n        ref={iframe}\r\n        sandbox=\"allow-scripts\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\bundler\\plugins\\unpkg-path-plugin.ts",["43"],"import * as esbuild from \"esbuild-wasm\";\r\n\r\nexport const unpkgPathPlugin = () => {\r\n  return {\r\n    name: \"unpkg-path-plugin\",\r\n    setup(build: esbuild.PluginBuild) {\r\n      //handle root entry file of 'index.js'\r\n      build.onResolve({ filter: /(^index\\.js$)/ }, () => {\r\n        return {\r\n          path: \"index.js\",\r\n          namespace: \"a\",\r\n        };\r\n      });\r\n      // handle relative paths in modules\r\n      build.onResolve({ filter: /^\\.+\\// }, (args) => {\r\n        const newURL = new URL(\r\n          args.path,\r\n          \"https://unpkg.com\" + args.resolveDir + \"/\"\r\n        );\r\n        return {\r\n          namespace: \"a\",\r\n          path: newURL.href,\r\n        };\r\n      });\r\n      // handle requested file in module\r\n      build.onResolve({ filter: /.*/ }, async (args) => {\r\n        return {\r\n          namespace: \"a\",\r\n          path: `https://unpkg.com/${args.path}`,\r\n        };\r\n      });\r\n    },\r\n  };\r\n};\r\n","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\bundler\\plugins\\fetch-plugin.ts",["44","45"],"import * as esbuild from \"esbuild-wasm\";\r\nimport localForage from \"localforage\";\r\nimport axios from \"axios\";\r\n\r\nconst fileCache = localForage.createInstance({\r\n  name: \"filecache\",\r\n});\r\n\r\nexport const fetchPlugin = (input: string) => {\r\n  return {\r\n    name: \"fetch-plugin\",\r\n    setup(build: esbuild.PluginBuild) {\r\n      //handle root entry file of 'index.js'\r\n      build.onLoad({ filter: /(^index\\.js$)/ }, () => {\r\n        return {\r\n          loader: \"jsx\",\r\n          contents: input,\r\n        };\r\n      });\r\n\r\n      //load cached file\r\n      build.onLoad({ filter: /.*/ }, async (args) => {\r\n        const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(\r\n          args.path\r\n        );\r\n        if (cachedResult) {\r\n          return cachedResult;\r\n        }\r\n      });\r\n\r\n      //handle CSS file\r\n      build.onLoad({ filter: /.css$/ }, async (args: any) => {\r\n        const { data, request } = await axios.get(args.path);\r\n        fileCache.setItem(args.path, data);\r\n        const escapedData = data\r\n          .replace(/\\n/g, \"\")\r\n          .replace(/\"/g, '\\\\\"')\r\n          .replace(/'/g, \"\\\\'\");\r\n\r\n        const contents = `\r\n          const style = document.createElement('style');\r\n          style.innerText = '${escapedData}';\r\n          document.head.appendChild(style);\r\n          `;\r\n\r\n        const result: esbuild.OnLoadResult = {\r\n          loader: \"jsx\",\r\n          contents,\r\n          resolveDir: new URL(\"./\", request.responseURL).pathname,\r\n        };\r\n        fileCache.setItem(args.path, result);\r\n        return result;\r\n      });\r\n\r\n      //handle JS file\r\n      build.onLoad({ filter: /.*/ }, async (args) => {\r\n        const { data, request } = await axios.get(args.path);\r\n        fileCache.setItem(args.path, data);\r\n        const result: esbuild.OnLoadResult = {\r\n          loader: \"jsx\",\r\n          contents: data,\r\n          resolveDir: new URL(\"./\", request.responseURL).pathname,\r\n        };\r\n        fileCache.setItem(args.path, result);\r\n        return result;\r\n      });\r\n    },\r\n  };\r\n};\r\n","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\bundler\\index.ts",["46"],"import * as esbuild from \"esbuild-wasm\";\r\nimport { unpkgPathPlugin } from \"./plugins/unpkg-path-plugin\";\r\nimport { fetchPlugin } from \"./plugins/fetch-plugin\";\r\n\r\nlet service: esbuild.Service;\r\n\r\nconst bundle = async (inputCode: string) => {\r\n  if (!service) {\r\n    service = await esbuild.startService({\r\n      worker: true,\r\n      wasmURL: \"https://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm\",\r\n    });\r\n  }\r\n\r\n  const result = await service.build({\r\n    entryPoints: [\"index.js\"],\r\n    bundle: true,\r\n    write: false,\r\n    plugins: [fetchPlugin(inputCode), unpkgPathPlugin()],\r\n    define: {\r\n      \"process.env.NODE_ENV\": '\"production\"',\r\n      global: \"window\",\r\n    },\r\n  });\r\n\r\n  return result.outputFiles[0].text;\r\n};\r\n\r\nexport default bundle;\r\n","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\components\\code-cell\\code-cell.tsx",["47"],"import { useState } from \"react\";\r\nimport CodeEditor from \"components/code-editor/code-editor\";\r\nimport Preview from \"components/preview/preview\";\r\nimport bundle from \"../../bundler\";\r\nimport Resizable from \"components/resizable/resizable\";\r\nconst CodeCell: React.FC = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [code, setCode] = useState(\"\");\r\n\r\n  const onClick = async () => {\r\n    const bundledCode = await bundle(input);\r\n    setCode(bundledCode);\r\n  };\r\n\r\n  const handleEditorChange = (value: string) => {\r\n    setInput(value);\r\n  };\r\n\r\n  return (\r\n    <Resizable direction=\"vertical\">\r\n      <div style={{ height: \"100%\", display: \"flex\", flexDirection: \"row\" }}>\r\n        <Resizable direction=\"horizontal\">\r\n          <CodeEditor\r\n            onChange={handleEditorChange}\r\n            initialValue=\"//start writing your code!\"\r\n          />\r\n        </Resizable>\r\n\r\n        <Preview code={code} />\r\n      </div>\r\n    </Resizable>\r\n  );\r\n};\r\n\r\nexport default CodeCell;\r\n","C:\\Users\\Ahmett\\Desktop\\codemark\\src\\components\\resizable\\resizable.tsx",["48"],{"ruleId":"49","severity":1,"message":"50","line":13,"column":28,"nodeType":"51","messageId":"52","endLine":13,"endColumn":31,"suggestions":"53"},{"ruleId":"49","severity":1,"message":"50","line":30,"column":25,"nodeType":"51","messageId":"52","endLine":30,"endColumn":28,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":3,"column":32,"nodeType":"57","messageId":"58","endLine":3,"endColumn":37},{"ruleId":"55","severity":1,"message":"56","line":9,"column":28,"nodeType":"57","messageId":"58","endLine":9,"endColumn":46},{"ruleId":"49","severity":1,"message":"50","line":32,"column":54,"nodeType":"51","messageId":"52","endLine":32,"endColumn":57,"suggestions":"59"},{"ruleId":"55","severity":1,"message":"56","line":7,"column":16,"nodeType":"57","messageId":"58","endLine":7,"endColumn":44},{"ruleId":"60","severity":1,"message":"61","line":10,"column":9,"nodeType":"62","messageId":"63","endLine":10,"endColumn":16},{"ruleId":"49","severity":1,"message":"50","line":16,"column":16,"nodeType":"51","messageId":"52","endLine":16,"endColumn":19,"suggestions":"64"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["65","66"],["67","68"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType",["69","70"],"@typescript-eslint/no-unused-vars","'onClick' is assigned a value but never used.","Identifier","unusedVar",["71","72"],{"messageId":"73","fix":"74","desc":"75"},{"messageId":"76","fix":"77","desc":"78"},{"messageId":"73","fix":"79","desc":"75"},{"messageId":"76","fix":"80","desc":"78"},{"messageId":"73","fix":"81","desc":"75"},{"messageId":"76","fix":"82","desc":"78"},{"messageId":"73","fix":"83","desc":"75"},{"messageId":"76","fix":"84","desc":"78"},"suggestUnknown",{"range":"85","text":"86"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"85","text":"87"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"88","text":"86"},{"range":"88","text":"87"},{"range":"89","text":"86"},{"range":"89","text":"87"},{"range":"90","text":"86"},{"range":"90","text":"87"},[458,461],"unknown","never",[737,740],[873,876],[643,646]]